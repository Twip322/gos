using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GosTest
{
   
    class HashWithChaining
    {

        /*Метод-цепоцки. Суть этого метода проста: если хеш-функция выделяет один индекс сразу двум элементам, то храниться они будут 
         * в одном и том же индексе, но уже с помощью двусвязного списка. */
        public int SIZE = 10;
        List<int>[] table;
        // Формируем таблицу 
        public HashWithChaining()
        {
            table = new List<int>[SIZE];

            for (int i = 0; i < table.Length; i++)
            {
                table[i] = new List<int>();
            }
        }
        //вычисляем хеш по значению
        public int hash(int value)
        {
            return Math.Abs(value) % SIZE;
        }
        public void reHash(int size)
        {
            List<int>[] newTable = new List<int>[size];
            SIZE = size;
            for (int i = 0; i < newTable.Length; i++)
            {
                newTable[i] = new List<int>();
            }
            for (int i = 0; i < table.Length; i++)
            {
                if(table[i].Count!=0)
                {
                    foreach(int test in table[i])
                    {
                        int code = hash(test);
                        newTable[code].Add(test);
                    }
                }
            }
            table = newTable;
        }
        // добавление в таблицу и собстна с цепочку
        public void add(int value)
        {
            int code = hash(value);
            table[code].Add(value);
        }
        //поиск значения
        public void find(int value)
        {
            //вычисляем хеш
            int code = hash(value);
            //находим знначение в методе цепочек
            for (int i = 0; i < table[code].Count; i++)
            {
                if (table[code][i].Equals(value))
                {
                    Console.WriteLine("Найден элемент: code: " + code + " i: " + i + " value: " + value);
                    return;
                }
            }
            Console.WriteLine("Не нашли");
        }
        // Удаление ну тут так же по хешу обрааемся в ячейку находим значение и удаляем
        public bool delete(int value)
        {
            int code = hash(value);
            for (int i = 0; i < table[code].Count; i++)
            {
                if (table[code].Contains(value))
                {
                    table[code].Remove(value);
                    return true;
                }
            }
            return false;
        }
        public void printTable()
        {
            for (int i = 0; i < table.Length; i++)
            {
                if (table[i].Count == 0)
                    continue;
                Console.Write(i + " ");
                for (int k = 0; k < table[i].Count; k++)
                {
                    if (!table[i][k].Equals(0))
                    {
                        Console.Write(table[i][k] + " ");
                    }
                }
                Console.WriteLine();
            }
        }
    }
    public class Program
    {
        static void Main(string[] args)
        {
            HashWithChaining h = new HashWithChaining();
            h.add(7);
            h.add(3);
            h.add(8);
            h.add(7);
            h.printTable();
            h.reHash(20);
            h.printTable();
            Console.ReadLine();

        }
    }
}
